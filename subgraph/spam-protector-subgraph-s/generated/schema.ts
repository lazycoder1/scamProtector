// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class FlaggedCall extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FlaggedCall entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type FlaggedCall must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FlaggedCall", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): FlaggedCall | null {
    return changetype<FlaggedCall | null>(
      store.get("FlaggedCall", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get callTime(): BigInt {
    let value = this.get("callTime");
    return value!.toBigInt();
  }

  set callTime(value: BigInt) {
    this.set("callTime", Value.fromBigInt(value));
  }

  get obfuscatedNumber(): string {
    let value = this.get("obfuscatedNumber");
    return value!.toString();
  }

  set obfuscatedNumber(value: string) {
    this.set("obfuscatedNumber", Value.fromString(value));
  }

  get submittedBy(): Bytes {
    let value = this.get("submittedBy");
    return value!.toBytes();
  }

  set submittedBy(value: Bytes) {
    this.set("submittedBy", Value.fromBytes(value));
  }

  get label(): string {
    let value = this.get("label");
    return value!.toString();
  }

  set label(value: string) {
    this.set("label", Value.fromString(value));
  }

  get callType(): i32 {
    let value = this.get("callType");
    return value!.toI32();
  }

  set callType(value: i32) {
    this.set("callType", Value.fromI32(value));
  }

  get verified(): boolean {
    let value = this.get("verified");
    return value!.toBoolean();
  }

  set verified(value: boolean) {
    this.set("verified", Value.fromBoolean(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class spam extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save spam entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type spam must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("spam", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): spam | null {
    return changetype<spam | null>(store.get("spam", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get spam(): boolean {
    let value = this.get("spam");
    return value!.toBoolean();
  }

  set spam(value: boolean) {
    this.set("spam", Value.fromBoolean(value));
  }
}

export class Proof extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Proof entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Proof must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Proof", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Proof | null {
    return changetype<Proof | null>(store.get("Proof", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get root(): BigInt {
    let value = this.get("root");
    return value!.toBigInt();
  }

  set root(value: BigInt) {
    this.set("root", Value.fromBigInt(value));
  }

  get nullifierHash(): BigInt {
    let value = this.get("nullifierHash");
    return value!.toBigInt();
  }

  set nullifierHash(value: BigInt) {
    this.set("nullifierHash", Value.fromBigInt(value));
  }

  get proof(): Array<BigInt> | null {
    let value = this.get("proof");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set proof(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("proof");
    } else {
      this.set("proof", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}
